apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

rootProject.ext.set("packageName", 'rootbeerFresh.library')
rootProject.ext.set("libVersionName", '1.0.0')

buildscript {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.3'

        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

apply plugin: 'jacoco-android'

group = rootProject.ext.packageName
version = rootProject.ext.libVersionName

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    configurations = ['archives'] // When uploading configuration files

    publish = true // [Default: false] Whether version should be auto published after an upload

    pkg {
        repo = 'rootbeerfresh' // Repository name (Created in the repository Bintray site)
        name = project.name // module name
        userOrg = user // An optional organization name when the repo belongs to one of the user's orgs
        desc = 'rootbeerFresh library' // Optional
        licenses = ['Apache-2.0']

        vcsUrl = 'https://github.com/KimChangYoun/rootbeerFresh.git'
        websiteUrl = 'https://github.com/KimChangYoun/rootbeerFresh'
        // issueTrackerUrl = '' // Optional

        labels = ['aar', 'android', 'example'] // Optional
        publicDownloadNumbers = true

        githubRepo = 'kimchangyoun/rootbeerFresh' // Optional Github repository
        githubReleaseNotesFile = 'changes.md' // Optional Github readme file

        version {
            name = rootProject.ext.libVersionName // The name of your library project
            desc = 'RootbeerFresh is an open source project that checks if your Android smartphone device is rooted.' // Optional - Version-specific description'
            released  = new Date() // Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = rootProject.ext.libVersionName
        }
    }
}

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode 1
        versionName rootProject.ext.libVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // Perform a check to see if the NDK exists
    if (android.getNdkDirectory() != null && android.getNdkDirectory().exists()) {
        // If it does, perform compilation
        logger.debug("Found NDK" + android.getNdkDirectory())

        externalNativeBuild {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }

    } else {
        //Otherwise disable automatic ndk-build and use pre-compiled .so files
        logger.debug("NDK Not Present" + android.getNdkDirectory())

        sourceSets {
            main {
                jni.srcDirs = []
            }
        }
    }
    packagingOptions {
        // In case there are both compiled .so files and provided .so files, pick the first (should be generated)
        pickFirst('lib/*/libtool-checker.so')
    }
    productFlavors {
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.10.0'
}

// JCenter publish
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}

apply from: 'https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle'
